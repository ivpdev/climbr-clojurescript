;; Analyzed by ClojureScript 1.7.170
{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name climbr.behaviour.behaviour, :imports nil, :requires {m climbr.matter.matter, climbr.matter.matter climbr.matter.matter, a climbr.app_state, climbr.app_state climbr.app_state, k climbr.controls.keyboard, climbr.controls.keyboard climbr.controls.keyboard, u climbr.utils.utils, climbr.utils.utils climbr.utils.utils, cljs.core.async cljs.core.async}, :uses {<! cljs.core.async, chan cljs.core.async, tap cljs.core.async}, :defs {fetch-hand {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/src/climbr/behaviour/behaviour.cljs", :line 99, :column 8, :end-line 99, :end-column 18, :private true, :arglists (quote ([hand]))}, :private true, :name climbr.behaviour.behaviour/fetch-hand, :variadic false, :file "src/climbr/behaviour/behaviour.cljs", :end-column 18, :method-params ([hand]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hand]))}, def- {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/src/climbr/behaviour/behaviour.cljs", :line 182, :column 11, :end-line 182, :end-column 15, :macro true, :arglists (quote ([item value]))}, :name climbr.behaviour.behaviour/def-, :variadic false, :file "src/climbr/behaviour/behaviour.cljs", :end-column 15, :method-params ([&form &env item value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 182, :macro true, :end-line 182, :max-fixed-arity 4, :fn-var true, :arglists (quote ([item value]))}, holds-hand? {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/src/climbr/behaviour/behaviour.cljs", :line 161, :column 8, :end-line 161, :end-column 19, :private true, :arglists (quote ([hand]))}, :private true, :name climbr.behaviour.behaviour/holds-hand?, :variadic false, :file "src/climbr/behaviour/behaviour.cljs", :end-column 19, :method-params ([hand]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 161, :end-line 161, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hand]))}, init-boulder-release-events! {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/src/climbr/behaviour/behaviour.cljs", :line 131, :column 7, :end-line 131, :end-column 35, :arglists (quote ([engine]))}, :name climbr.behaviour.behaviour/init-boulder-release-events!, :variadic false, :file "src/climbr/behaviour/behaviour.cljs", :end-column 35, :method-params ([engine]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 1, :fn-var true, :arglists (quote ([engine]))}, lunge! {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/src/climbr/behaviour/behaviour.cljs", :line 34, :column 8, :end-line 34, :end-column 14, :private true, :arglists (quote ([what _ where]))}, :private true, :name climbr.behaviour.behaviour/lunge!, :variadic false, :file "src/climbr/behaviour/behaviour.cljs", :end-column 14, :method-params ([what _ where]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 3, :fn-var true, :arglists (quote ([what _ where]))}, get-boulder-for-hand {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/src/climbr/behaviour/behaviour.cljs", :line 124, :column 8, :end-line 124, :end-column 28, :private true, :arglists (quote ([hand-name]))}, :private true, :name climbr.behaviour.behaviour/get-boulder-for-hand, :variadic false, :file "src/climbr/behaviour/behaviour.cljs", :end-column 28, :method-params ([hand-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 124, :end-line 124, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hand-name]))}, holds-nothing? {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/src/climbr/behaviour/behaviour.cljs", :line 168, :column 8, :end-line 168, :end-column 22, :private true, :arglists (quote ([]))}, :private true, :name climbr.behaviour.behaviour/holds-nothing?, :variadic false, :file "src/climbr/behaviour/behaviour.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 168, :end-line 168, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, holds-one? {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/src/climbr/behaviour/behaviour.cljs", :line 169, :column 8, :end-line 169, :end-column 18, :private true, :arglists (quote ([]))}, :private true, :name climbr.behaviour.behaviour/holds-one?, :variadic false, :file "src/climbr/behaviour/behaviour.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 169, :end-line 169, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, h1-holds? {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/src/climbr/behaviour/behaviour.cljs", :line 165, :column 8, :end-line 165, :end-column 17, :private true, :arglists (quote ([]))}, :private true, :name climbr.behaviour.behaviour/h1-holds?, :variadic false, :file "src/climbr/behaviour/behaviour.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 165, :end-line 165, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, on-the-ground? {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/src/climbr/behaviour/behaviour.cljs", :line 171, :column 8, :end-line 171, :end-column 22, :private true, :arglists (quote ([]))}, :private true, :name climbr.behaviour.behaviour/on-the-ground?, :variadic false, :file "src/climbr/behaviour/behaviour.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 171, :end-line 171, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, fetch-climber-part {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/src/climbr/behaviour/behaviour.cljs", :line 97, :column 8, :end-line 97, :end-column 26, :private true, :arglists (quote ([part]))}, :private true, :name climbr.behaviour.behaviour/fetch-climber-part, :variadic false, :file "src/climbr/behaviour/behaviour.cljs", :end-column 26, :method-params ([part]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 1, :fn-var true, :arglists (quote ([part]))}, bind-keys {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/src/climbr/behaviour/behaviour.cljs", :line 173, :column 8, :end-line 173, :end-column 17, :private true, :arglists (quote ([key-actions]))}, :private true, :name climbr.behaviour.behaviour/bind-keys, :variadic false, :file "src/climbr/behaviour/behaviour.cljs", :end-column 17, :method-params ([key-actions]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 173, :end-line 173, :max-fixed-arity 1, :fn-var true, :arglists (quote ([key-actions]))}, init-boulder-touch-events! {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/src/climbr/behaviour/behaviour.cljs", :line 64, :column 7, :end-line 64, :end-column 33, :arglists (quote ([engine]))}, :name climbr.behaviour.behaviour/init-boulder-touch-events!, :variadic false, :file "src/climbr/behaviour/behaviour.cljs", :end-column 33, :method-params ([engine]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 1, :fn-var true, :arglists (quote ([engine]))}, init-climber-moves! {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/src/climbr/behaviour/behaviour.cljs", :line 9, :column 7, :end-line 9, :end-column 26, :arglists (quote ([]))}, :name climbr.behaviour.behaviour/init-climber-moves!, :variadic false, :file "src/climbr/behaviour/behaviour.cljs", :end-column 26, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, h2-holds? {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/src/climbr/behaviour/behaviour.cljs", :line 166, :column 8, :end-line 166, :end-column 17, :private true, :arglists (quote ([]))}, :private true, :name climbr.behaviour.behaviour/h2-holds?, :variadic false, :file "src/climbr/behaviour/behaviour.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 166, :end-line 166, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, fetch-free-hand {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/src/climbr/behaviour/behaviour.cljs", :line 114, :column 8, :end-line 114, :end-column 23, :private true, :arglists (quote ([]))}, :private true, :name climbr.behaviour.behaviour/fetch-free-hand, :variadic false, :file "src/climbr/behaviour/behaviour.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, remove-boulder-for-hand! {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/src/climbr/behaviour/behaviour.cljs", :line 154, :column 8, :end-line 154, :end-column 32, :private true, :arglists (quote ([hand-name]))}, :private true, :name climbr.behaviour.behaviour/remove-boulder-for-hand!, :variadic false, :file "src/climbr/behaviour/behaviour.cljs", :end-column 32, :method-params ([hand-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 154, :end-line 154, :max-fixed-arity 1, :fn-var true, :arglists (quote ([hand-name]))}, holds-both? {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/src/climbr/behaviour/behaviour.cljs", :line 167, :column 8, :end-line 167, :end-column 19, :private true, :arglists (quote ([]))}, :private true, :name climbr.behaviour.behaviour/holds-both?, :variadic false, :file "src/climbr/behaviour/behaviour.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 167, :end-line 167, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:y :climber :h1-holds :free-hand :else :top :horizonal :free :both-hands :vertical :recur :hand :up :right :left-hand :h2 :x :h1 :body :h2-holds :right-hand :left def :to}, :order [:up :left :right :both-hands :to :top :body :free-hand :else :left-hand :right-hand :hand :horizonal :vertical :free :x :y :h1-holds :h2-holds :climber :h1 :h2 :recur def]}, :doc nil}