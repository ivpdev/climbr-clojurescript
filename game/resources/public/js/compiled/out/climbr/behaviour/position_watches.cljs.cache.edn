{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name climbr.behaviour.position_watches, :imports nil, :requires {r reagi.core, reagi.core reagi.core, u climbr.utils.utils, climbr.utils.utils climbr.utils.utils}, :uses nil, :defs {watch-approaching! {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/behaviour/position_watches.cljs", :line 75, :column 7, :end-line 75, :end-column 25, :arglists (quote ([config]))}, :name climbr.behaviour.position_watches/watch-approaching!, :variadic false, :file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/behaviour/position_watches.cljs", :end-column 25, :method-params ([config]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists (quote ([config]))}, def- {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/behaviour/position_watches.cljs", :line 5, :column 11, :end-line 5, :end-column 15, :macro true, :arglists (quote ([item value]))}, :name climbr.behaviour.position_watches/def-, :variadic false, :file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/behaviour/position_watches.cljs", :end-column 15, :method-params ([&form &env item value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :macro true, :end-line 5, :max-fixed-arity 4, :fn-var true, :arglists (quote ([item value]))}, watch-position! {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/behaviour/position_watches.cljs", :line 99, :column 7, :end-line 99, :end-column 22, :arglists (quote ([config]))}, :name climbr.behaviour.position_watches/watch-position!, :variadic false, :file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/behaviour/position_watches.cljs", :end-column 22, :method-params ([config]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 1, :fn-var true, :arglists (quote ([config]))}, signal-from-property! {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/behaviour/position_watches.cljs", :line 12, :column 7, :end-line 12, :end-column 28, :arglists (quote ([prop]))}, :name climbr.behaviour.position_watches/signal-from-property!, :variadic false, :file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/behaviour/position_watches.cljs", :end-column 28, :method-params ([prop]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([prop]))}, sqrt {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/behaviour/position_watches.cljs", :line 23, :column 8, :end-line 23, :end-column 12, :private true, :arglists (quote ([x]))}, :private true, :name climbr.behaviour.position_watches/sqrt, :variadic false, :file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/behaviour/position_watches.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, create-position-predicate-watch! {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/behaviour/position_watches.cljs", :line 55, :column 8, :end-line 55, :end-column 40, :private true, :arglists (quote ([predicate position-watch]))}, :private true, :name climbr.behaviour.position_watches/create-position-predicate-watch!, :variadic false, :file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/behaviour/position_watches.cljs", :end-column 40, :method-params ([predicate position-watch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 2, :fn-var true, :arglists (quote ([predicate position-watch]))}, create-nearing-watch! {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/behaviour/position_watches.cljs", :line 65, :column 7, :end-line 65, :end-column 28, :arglists (quote ([threshold distance-watch])), :doc "creates watch(signal + data) detecting if two bodies are near or not"}, :name climbr.behaviour.position_watches/create-nearing-watch!, :variadic false, :file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/behaviour/position_watches.cljs", :end-column 28, :method-params ([threshold distance-watch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 2, :fn-var true, :arglists (quote ([threshold distance-watch])), :doc "creates watch(signal + data) detecting if two bodies are near or not"}, sqr {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/behaviour/position_watches.cljs", :line 25, :column 8, :end-line 25, :end-column 11, :private true, :arglists (quote ([x]))}, :private true, :name climbr.behaviour.position_watches/sqr, :variadic false, :file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/behaviour/position_watches.cljs", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, create-body-position-watch! {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/behaviour/position_watches.cljs", :line 17, :column 7, :end-line 17, :end-column 34, :arglists (quote ([body])), :doc "creates watch(signal + data) body position"}, :name climbr.behaviour.position_watches/create-body-position-watch!, :variadic false, :file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/behaviour/position_watches.cljs", :end-column 34, :method-params ([body]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([body])), :doc "creates watch(signal + data) body position"}, not-keyword? {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/behaviour/position_watches.cljs", :line 8, :column 7, :end-line 8, :end-column 19, :arglists (quote ([val]))}, :name climbr.behaviour.position_watches/not-keyword?, :variadic false, :file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/behaviour/position_watches.cljs", :end-column 19, :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val]))}, create-distance-watch! {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/behaviour/position_watches.cljs", :line 27, :column 8, :end-line 27, :end-column 30, :private true, :arglists (quote ([position-watches-pair])), :doc "from pair of body position watches creates a watch of body distances"}, :private true, :name climbr.behaviour.position_watches/create-distance-watch!, :variadic false, :file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/behaviour/position_watches.cljs", :end-column 30, :method-params ([position-watches-pair]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([position-watches-pair])), :doc "from pair of body position watches creates a watch of body distances"}, without-keywords {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/behaviour/position_watches.cljs", :line 10, :column 7, :end-line 10, :end-column 23, :arglists (quote ([col]))}, :name climbr.behaviour.position_watches/without-keywords, :variadic false, :file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/behaviour/position_watches.cljs", :end-column 23, :method-params ([col]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([col]))}}, :require-macros {r reagi.core, reagi.core reagi.core}, :cljs.analyzer/constants {:seen #{:when-far :when-near :is :with :watch :TODO :approaching :distance :signal :when-true def :data}, :order [def :TODO :data :signal :watch :approaching :with :distance :when-near :when-far :is :when-true]}, :doc nil}