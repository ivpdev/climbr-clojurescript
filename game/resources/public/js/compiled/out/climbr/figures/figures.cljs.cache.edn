{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name climbr.figures.figures, :imports nil, :requires {m climbr.matter.matter, climbr.matter.matter climbr.matter.matter, u climbr.utils.utils, climbr.utils.utils climbr.utils.utils}, :uses {not-nil? climbr.utils.utils}, :defs {get-boulder-color {:protocol-inline nil, :meta {:file "/home/ivp/dev/workspaces/_etc/climbr-node/game/src/climbr/figures/figures.cljs", :line 6, :column 8, :end-line 6, :end-column 25, :private true, :arglists (quote ([standable? hookable?]))}, :private true, :name climbr.figures.figures/get-boulder-color, :variadic false, :file "src/climbr/figures/figures.cljs", :end-column 25, :method-params ([standable? hookable?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 2, :fn-var true, :arglists (quote ([standable? hookable?]))}, get-all-standables {:protocol-inline nil, :meta {:file "/home/ivp/dev/workspaces/_etc/climbr-node/game/src/climbr/figures/figures.cljs", :line 12, :column 7, :end-line 12, :end-column 25, :arglists (quote ([]))}, :name climbr.figures.figures/get-all-standables, :variadic false, :file "src/climbr/figures/figures.cljs", :end-column 25, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, create-boulder {:protocol-inline nil, :meta {:file "/home/ivp/dev/workspaces/_etc/climbr-node/game/src/climbr/figures/figures.cljs", :line 15, :column 7, :end-line 15, :end-column 21, :arglists (quote ([opts]))}, :name climbr.figures.figures/create-boulder, :variadic false, :file "src/climbr/figures/figures.cljs", :end-column 21, :method-params ([opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([opts]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:y :hookable :category :isStatic :else :collisionFilter :width :fillStyle :render :standable :x :height}, :order [:else :x :y :width :height :standable :hookable :isStatic :render :fillStyle :collisionFilter :category]}, :doc "Utilities for bodies"}