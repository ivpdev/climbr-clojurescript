{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name climbr.figures.levels, :imports nil, :requires {u climbr.utils.utils, climbr.utils.utils climbr.utils.utils, l0 climbr.figures.level0, climbr.figures.level0 climbr.figures.level0, l1 climbr.figures.level1, climbr.figures.level1 climbr.figures.level1, generator climbr.figures.level_generator, climbr.figures.level_generator climbr.figures.level_generator}, :uses nil, :defs {get-level {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/figures/levels.cljs", :line 7, :column 7, :end-line 7, :end-column 16, :arglists (quote ([level-name]))}, :name climbr.figures.levels/get-level, :variadic false, :file "src/climbr/figures/levels.cljs", :end-column 16, :method-params ([level-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([level-name]))}, get-current-level {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/figures/levels.cljs", :line 15, :column 7, :end-line 15, :end-column 24, :arglists (quote ([])), :doc "get level according to levelname in URL"}, :name climbr.figures.levels/get-current-level, :variadic false, :file "src/climbr/figures/levels.cljs", :end-column 24, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "get level according to levelname in URL"}, get-current-level-code {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/figures/levels.cljs", :line 21, :column 7, :end-line 21, :end-column 29, :arglists (quote ([]))}, :name climbr.figures.levels/get-current-level-code, :variadic false, :file "src/climbr/figures/levels.cljs", :end-column 29, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else}, :order [:else]}, :doc nil}