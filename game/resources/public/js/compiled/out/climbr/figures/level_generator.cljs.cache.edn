{:rename-macros {}, :renames {}, :use-macros {random-int-with climbr.utils.random.macros, coalesce climbr.utils.macros, random-boolean climbr.utils.random.macros, TODO climbr.utils.macros, with-seed climbr.utils.random.macros}, :excludes #{}, :name climbr.figures.level_generator, :imports nil, :requires {u climbr.utils.utils, climbr.utils.utils climbr.utils.utils}, :uses nil, :defs {generate-boulder-candidate {:protocol-inline nil, :meta {:file "/Users/ivan.panov/dev/work/climbr/climbr-node/game/src/climbr/figures/level_generator.cljs", :line 7, :column 7, :end-line 7, :end-column 33, :arglists (quote ([seed]))}, :name climbr.figures.level_generator/generate-boulder-candidate, :variadic false, :file "src/climbr/figures/level_generator.cljs", :end-column 33, :method-params ([seed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([seed]))}, fits? {:protocol-inline nil, :meta {:file "/Users/ivan.panov/dev/work/climbr/climbr-node/game/src/climbr/figures/level_generator.cljs", :line 19, :column 7, :end-line 19, :end-column 12, :arglists (quote ([level boulder-candidate]))}, :name climbr.figures.level_generator/fits?, :variadic false, :file "src/climbr/figures/level_generator.cljs", :end-column 12, :method-params ([level boulder-candidate]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([level boulder-candidate]))}, next-rand {:protocol-inline nil, :meta {:file "/Users/ivan.panov/dev/work/climbr/climbr-node/game/src/climbr/figures/level_generator.cljs", :line 22, :column 7, :end-line 22, :end-column 16, :arglists (quote ([seed]))}, :name climbr.figures.level_generator/next-rand, :variadic false, :file "src/climbr/figures/level_generator.cljs", :end-column 16, :method-params ([seed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([seed]))}}, :require-macros {climbr.utils.macros climbr.utils.macros, climbr.utils.random.macros climbr.utils.random.macros}, :cljs.analyzer/constants {:seen #{:y :holdable :exclude :else :width :standable :x :range :height}, :order [:range :exclude :else :x :y :width :height :standable :holdable]}, :doc nil}