{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name climbr.utils.utils, :imports nil, :requires {url cemerick.url, cemerick.url cemerick.url}, :uses nil, :defs {get-canvas-height {:protocol-inline nil, :meta {:file "/Users/ivan.panov/dev/work/climbr/climbr-node/game/src/climbr/utils/utils.cljs", :line 51, :column 7, :end-line 51, :end-column 24, :arglists (quote ([]))}, :name climbr.utils.utils/get-canvas-height, :variadic false, :file "src/climbr/utils/utils.cljs", :end-column 24, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, def- {:protocol-inline nil, :meta {:file "/Users/ivan.panov/dev/work/climbr/climbr-node/game/src/climbr/utils/utils.cljs", :line 5, :column 11, :end-line 5, :end-column 15, :macro true, :arglists (quote ([item value]))}, :name climbr.utils.utils/def-, :variadic false, :file "src/climbr/utils/utils.cljs", :end-column 15, :method-params ([&form &env item value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :macro true, :end-line 5, :max-fixed-arity 4, :fn-var true, :arglists (quote ([item value]))}, get-current-level-name {:protocol-inline nil, :meta {:file "/Users/ivan.panov/dev/work/climbr/climbr-node/game/src/climbr/utils/utils.cljs", :line 26, :column 7, :end-line 26, :end-column 29, :arglists (quote ([])), :doc "get name of level from URL"}, :name climbr.utils.utils/get-current-level-name, :variadic false, :file "src/climbr/utils/utils.cljs", :end-column 29, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "get name of level from URL"}, not-nil? {:name climbr.utils.utils/not-nil?, :file "src/climbr/utils/utils.cljs", :line 24, :column 1, :end-line 24, :end-column 14, :meta {:file "/Users/ivan.panov/dev/work/climbr/climbr-node/game/src/climbr/utils/utils.cljs", :line 24, :column 6, :end-line 24, :end-column 14}}, get-canvas-width {:protocol-inline nil, :meta {:file "/Users/ivan.panov/dev/work/climbr/climbr-node/game/src/climbr/utils/utils.cljs", :line 46, :column 7, :end-line 46, :end-column 23, :arglists (quote ([]))}, :name climbr.utils.utils/get-canvas-width, :variadic false, :file "src/climbr/utils/utils.cljs", :end-column 23, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, hide-loading-banner! {:protocol-inline nil, :meta {:file "/Users/ivan.panov/dev/work/climbr/climbr-node/game/src/climbr/utils/utils.cljs", :line 35, :column 7, :end-line 35, :end-column 27, :arglists (quote ([]))}, :name climbr.utils.utils/hide-loading-banner!, :variadic false, :file "src/climbr/utils/utils.cljs", :end-column 27, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, in? {:protocol-inline nil, :meta {:file "/Users/ivan.panov/dev/work/climbr/climbr-node/game/src/climbr/utils/utils.cljs", :line 19, :column 7, :end-line 19, :end-column 10, :arglists (quote ([coll el])), :doc "true if coll contains el"}, :name climbr.utils.utils/in?, :variadic false, :file "src/climbr/utils/utils.cljs", :end-column 10, :method-params ([coll el]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll el])), :doc "true if coll contains el"}, debug {:protocol-inline nil, :meta {:file "/Users/ivan.panov/dev/work/climbr/climbr-node/game/src/climbr/utils/utils.cljs", :line 8, :column 7, :end-line 8, :end-column 12, :arglists (quote ([x]))}, :name climbr.utils.utils/debug, :variadic false, :file "src/climbr/utils/utils.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, cartesian-prod {:protocol-inline nil, :meta {:file "/Users/ivan.panov/dev/work/climbr/climbr-node/game/src/climbr/utils/utils.cljs", :line 39, :column 7, :end-line 39, :end-column 21, :arglists (quote ([col1 col2])), :doc "computes cartesian product of two collections returning collection of all possible combinations"}, :name climbr.utils.utils/cartesian-prod, :variadic false, :file "src/climbr/utils/utils.cljs", :end-column 21, :method-params ([col1 col2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 2, :fn-var true, :arglists (quote ([col1 col2])), :doc "computes cartesian product of two collections returning collection of all possible combinations"}, TODO {:protocol-inline nil, :meta {:file "/Users/ivan.panov/dev/work/climbr/climbr-node/game/src/climbr/utils/utils.cljs", :line 15, :column 11, :end-line 15, :end-column 15, :macro true, :arglists (quote ([& body])), :doc "Ignores body, yields nil", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}}, :name climbr.utils.utils/TODO, :variadic true, :file "src/climbr/utils/utils.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}, :method-params [(&form &env body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 15, :macro true, :end-line 15, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & body]), :doc "Ignores body, yields nil"}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:query def}, :order [def :query]}, :doc "Utilities"}