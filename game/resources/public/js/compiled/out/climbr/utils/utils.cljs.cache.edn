;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{test println}, :name climbr.utils.utils, :imports nil, :requires nil, :uses nil, :defs {def- {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/utils/utils.cljs", :line 4, :column 11, :end-line 4, :end-column 15, :macro true, :arglists (quote ([item value]))}, :name climbr.utils.utils/def-, :variadic false, :file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/utils/utils.cljs", :end-column 15, :method-params ([&form &env item value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :macro true, :end-line 4, :max-fixed-arity 4, :fn-var true, :arglists (quote ([item value]))}, debug {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/utils/utils.cljs", :line 7, :column 7, :end-line 7, :end-column 12, :arglists (quote ([x]))}, :name climbr.utils.utils/debug, :variadic false, :file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/utils/utils.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, println {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/utils/utils.cljs", :line 11, :column 7, :end-line 11, :end-column 14, :arglists (quote ([x]))}, :name climbr.utils.utils/println, :variadic false, :file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/utils/utils.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, TODO {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/utils/utils.cljs", :line 14, :column 11, :end-line 14, :end-column 15, :macro true, :arglists (quote ([& body])), :doc "Ignores body, yields nil", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}}, :name climbr.utils.utils/TODO, :variadic true, :file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/utils/utils.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}, :method-params [(&form &env body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 14, :macro true, :end-line 14, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & body]), :doc "Ignores body, yields nil"}, in? {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/utils/utils.cljs", :line 18, :column 7, :end-line 18, :end-column 10, :arglists (quote ([coll el])), :doc "true if coll contains elm"}, :name climbr.utils.utils/in?, :variadic false, :file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/utils/utils.cljs", :end-column 10, :method-params ([coll el]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll el])), :doc "true if coll contains elm"}, when-let* {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/utils/utils.cljs", :line 29, :column 11, :end-line 29, :end-column 20, :macro true, :arglists (quote ([bindings & body])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}}, :name climbr.utils.utils/when-let*, :variadic true, :file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/utils/utils.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(&form &env bindings body)], :arglists ([&form &env bindings & body]), :arglists-meta (nil)}, :method-params [(&form &env bindings body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 29, :macro true, :end-line 29, :max-fixed-arity 3, :fn-var true, :arglists ([&form &env bindings & body])}, for-each {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/utils/utils.cljs", :line 36, :column 11, :end-line 36, :end-column 19, :macro true, :arglists (quote ([_]))}, :name climbr.utils.utils/for-each, :variadic false, :file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/utils/utils.cljs", :end-column 19, :method-params ([&form &env _]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :macro true, :end-line 36, :max-fixed-arity 3, :fn-var true, :arglists (quote ([_]))}, test {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/utils/utils.cljs", :line 39, :column 7, :end-line 39, :end-column 11, :arglists (quote ([ts]))}, :name climbr.utils.utils/test, :variadic false, :file "/Users/ivp/dev/projects/climbr/climbr-node/game/src/climbr/utils/utils.cljs", :end-column 11, :method-params ([ts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ts]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{climbr.utils.utils/when-let* do cljs.core/when-let :TODO def}, :order [def cljs.core/when-let climbr.utils.utils/when-let* do :TODO]}, :doc "Utilities"}