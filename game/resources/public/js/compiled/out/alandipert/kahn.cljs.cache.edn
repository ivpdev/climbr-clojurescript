;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name alandipert.kahn, :imports nil, :requires {clojure.set clojure.set}, :uses {union clojure.set, intersection clojure.set, difference clojure.set}, :defs {without {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/alandipert/kahn.cljs", :line 13, :column 7, :end-line 13, :end-column 14, :arglists (quote ([s x])), :doc "Returns set s with x removed."}, :name alandipert.kahn/without, :variadic false, :file "resources/public/js/compiled/out/alandipert/kahn.cljs", :end-column 14, :method-params ([s x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s x])), :doc "Returns set s with x removed."}, take-1 {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/alandipert/kahn.cljs", :line 17, :column 7, :end-line 17, :end-column 13, :arglists (quote ([s])), :doc "Returns the pair [element, s'] where s' is set s with element removed."}, :name alandipert.kahn/take-1, :variadic false, :file "resources/public/js/compiled/out/alandipert/kahn.cljs", :end-column 13, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Returns the pair [element, s'] where s' is set s with element removed."}, no-incoming {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/alandipert/kahn.cljs", :line 23, :column 7, :end-line 23, :end-column 18, :arglists (quote ([g])), :doc "Returns the set of nodes in graph g for which there are no incoming\n  edges, where g is a map of nodes to sets of nodes."}, :name alandipert.kahn/no-incoming, :variadic false, :file "resources/public/js/compiled/out/alandipert/kahn.cljs", :end-column 18, :method-params ([g]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g])), :doc "Returns the set of nodes in graph g for which there are no incoming\n  edges, where g is a map of nodes to sets of nodes."}, normalize {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/alandipert/kahn.cljs", :line 31, :column 7, :end-line 31, :end-column 16, :arglists (quote ([g])), :doc "Returns g with empty outgoing edges added for nodes with incoming\n  edges only.  Example: {:a #{:b}} => {:a #{:b}, :b #{}}"}, :name alandipert.kahn/normalize, :variadic false, :file "resources/public/js/compiled/out/alandipert/kahn.cljs", :end-column 16, :method-params ([g]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g])), :doc "Returns g with empty outgoing edges added for nodes with incoming\n  edges only.  Example: {:a #{:b}} => {:a #{:b}, :b #{}}"}, kahn-sort {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/alandipert/kahn.cljs", :line 38, :column 7, :end-line 38, :end-column 16, :arglists (quote ([g] [g l s])), :doc "Proposes a topological sort for directed graph g using Kahn's\n   algorithm, where g is a map of nodes to sets of nodes. If g is\n   cyclic, returns nil.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([g] [g l s]), :arglists ([g] [g l s]), :arglists-meta (nil nil)}}, :name alandipert.kahn/kahn-sort, :variadic false, :file "resources/public/js/compiled/out/alandipert/kahn.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([g] [g l s]), :arglists ([g] [g l s]), :arglists-meta (nil nil)}, :method-params ([g] [g l s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 3, :fn-var true, :arglists ([g] [g l s]), :doc "Proposes a topological sort for directed graph g using Kahn's\n   algorithm, where g is a map of nodes to sets of nodes. If g is\n   cyclic, returns nil."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{empty? not s}, :order [not empty? s]}, :doc nil}