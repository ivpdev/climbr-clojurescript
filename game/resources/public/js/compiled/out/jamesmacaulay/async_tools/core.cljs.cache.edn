;; Analyzed by ClojureScript 1.7.170
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{concat}, :name jamesmacaulay.async-tools.core, :imports nil, :requires {async cljs.core.async, cljs.core.async cljs.core.async, impl cljs.core.async.impl.protocols, cljs.core.async.impl.protocols cljs.core.async.impl.protocols, channels cljs.core.async.impl.channels, cljs.core.async.impl.channels cljs.core.async.impl.channels}, :uses {<! cljs.core.async, chan cljs.core.async, >! cljs.core.async}, :defs {concat {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/async_tools/core.cljs", :line 16, :column 7, :end-line 16, :end-column 13, :arglists (quote ([& chs])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(chs)], :arglists ([& chs]), :arglists-meta (nil)}}, :name jamesmacaulay.async-tools.core/concat, :variadic true, :file "resources/public/js/compiled/out/jamesmacaulay/async_tools/core.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(chs)], :arglists ([& chs]), :arglists-meta (nil)}, :method-params [(chs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 0, :fn-var true, :arglists ([& chs])}, do-effects {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/async_tools/core.cljs", :line 31, :column 7, :end-line 31, :end-column 17, :arglists (quote ([f! ch]))}, :name jamesmacaulay.async-tools.core/do-effects, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/async_tools/core.cljs", :end-column 17, :method-params ([f! ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f! ch]))}, log-mult {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/async_tools/core.cljs", :line 40, :column 7, :end-line 40, :end-column 15, :arglists (quote ([mult]))}, :name jamesmacaulay.async-tools.core/log-mult, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/async_tools/core.cljs", :end-column 15, :method-params ([mult]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([mult]))}, log-channel {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/async_tools/core.cljs", :line 44, :column 7, :end-line 44, :end-column 18, :arglists (quote ([ch]))}, :name jamesmacaulay.async-tools.core/log-channel, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/async_tools/core.cljs", :end-column 18, :method-params ([ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ch]))}, ConstantReadPort {:num-fields 1, :protocols #{cljs.core.async.impl.protocols/ReadPort}, :name jamesmacaulay.async-tools.core/ConstantReadPort, :file "resources/public/js/compiled/out/jamesmacaulay/async_tools/core.cljs", :end-column 26, :type true, :column 10, :line 48, :record false, :end-line 48, :skip-protocol-flag nil}, ->ConstantReadPort {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/async_tools/core.cljs", :line 48, :column 10, :end-line 48, :end-column 26, :protocols #{cljs.core.async.impl.protocols/ReadPort}, :skip-protocol-flag nil, :factory :positional, :arglists (quote ([boxed-value]))}, :protocols #{cljs.core.async.impl.protocols/ReadPort}, :name jamesmacaulay.async-tools.core/->ConstantReadPort, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/async_tools/core.cljs", :end-column 26, :method-params ([boxed-value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists (quote ([boxed-value])), :skip-protocol-flag nil}, constant {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/async_tools/core.cljs", :line 52, :column 7, :end-line 52, :end-column 15, :arglists (quote ([x]))}, :name jamesmacaulay.async-tools.core/constant, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/async_tools/core.cljs", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, readport? {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/async_tools/core.cljs", :line 56, :column 7, :end-line 56, :end-column 16, :arglists (quote ([x]))}, :name jamesmacaulay.async-tools.core/readport?, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/async_tools/core.cljs", :end-column 16, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, cast-as-readport {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/async_tools/core.cljs", :line 60, :column 7, :end-line 60, :end-column 23, :arglists (quote ([x]))}, :name jamesmacaulay.async-tools.core/cast-as-readport, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/async_tools/core.cljs", :end-column 23, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{boxed-value :else :recur}, :order [:recur :else boxed-value]}, :doc nil}