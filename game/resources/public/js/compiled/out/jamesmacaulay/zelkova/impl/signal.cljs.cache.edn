;; Analyzed by ClojureScript 1.7.170
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{}, :name jamesmacaulay.zelkova.impl.signal, :imports nil, :requires {clojure.zip clojure.zip, alandipert.kahn alandipert.kahn, async cljs.core.async, jamesmacaulay.async-tools.core jamesmacaulay.async-tools.core, cljs.core.async cljs.core.async, cljs.core.async.impl.protocols cljs.core.async.impl.protocols, kahn alandipert.kahn, clojure.set clojure.set, tools jamesmacaulay.async-tools.core, time jamesmacaulay.zelkova.impl.time, jamesmacaulay.zelkova.impl.time jamesmacaulay.zelkova.impl.time, zip clojure.zip, async-impl cljs.core.async.impl.protocols}, :uses {<! cljs.core.async, >! cljs.core.async}, :defs {fresh? {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 33, :column 4, :end-line 33, :end-column 10, :protocol jamesmacaulay.zelkova.impl.signal/MessageProtocol, :doc "returns `true` if the message represents a fresh value, `false` otherwise", :arglists (quote ([msg]))}, :protocol jamesmacaulay.zelkova.impl.signal/MessageProtocol, :name jamesmacaulay.zelkova.impl.signal/fresh?, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 10, :method-params ([msg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msg])), :doc "returns `true` if the message represents a fresh value, `false` otherwise"}, map->LiveChannelGraph {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 323, :column 12, :end-line 323, :end-column 28, :internal-ctor true, :factory :map, :arglists (quote ([G__19257]))}, :name jamesmacaulay.zelkova.impl.signal/map->LiveChannelGraph, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 28, :method-params ([G__19257]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 323, :end-line 323, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__19257]))}, EventProtocol {:meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 25, :column 14, :end-line 25, :end-column 27, :doc "Events come in from \"the outside world\" and get transformed into Messages by input signal nodes", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {topic [[event]], timestamp [[event]], record-timestamp [[event timestamp]]}}}, :protocol-symbol true, :name jamesmacaulay.zelkova.impl.signal/EventProtocol, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 27, :column 1, :line 25, :protocol-info {:methods {topic [[event]], timestamp [[event]], record-timestamp [[event timestamp]]}}, :info nil, :end-line 25, :impls #{jamesmacaulay.zelkova.impl.signal/Event}, :doc "Events come in from \"the outside world\" and get transformed into Messages by input signal nodes", :jsdoc ("@interface")}, parents-map {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 84, :column 4, :end-line 84, :end-column 15, :protocol jamesmacaulay.zelkova.impl.signal/SignalProtocol, :doc nil, :arglists (quote ([s]))}, :protocol jamesmacaulay.zelkova.impl.signal/SignalProtocol, :name jamesmacaulay.zelkova.impl.signal/parents-map, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 15, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 84, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc nil}, timestamp {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 28, :column 4, :end-line 28, :end-column 13, :protocol jamesmacaulay.zelkova.impl.signal/EventProtocol, :doc nil, :arglists (quote ([event]))}, :protocol jamesmacaulay.zelkova.impl.signal/EventProtocol, :name jamesmacaulay.zelkova.impl.signal/timestamp, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 13, :method-params ([event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([event])), :doc nil}, input? {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 82, :column 4, :end-line 82, :end-column 10, :protocol jamesmacaulay.zelkova.impl.signal/SignalProtocol, :doc nil, :arglists (quote ([s]))}, :protocol jamesmacaulay.zelkova.impl.signal/SignalProtocol, :name jamesmacaulay.zelkova.impl.signal/input?, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 10, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 82, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc nil}, topsort->topic-map {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 144, :column 7, :end-line 144, :end-column 25, :arglists (quote ([sorted-sigs]))}, :name jamesmacaulay.zelkova.impl.signal/topsort->topic-map, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 25, :method-params ([sorted-sigs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 144, :end-line 144, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sorted-sigs]))}, skip-subtree {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 103, :column 8, :end-line 103, :end-column 20, :private true, :arglists (quote ([loc])), :doc "Returns a new zipper location that skips the whole subtree at `loc`."}, :private true, :name jamesmacaulay.zelkova.impl.signal/skip-subtree, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 20, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns a new zipper location that skips the whole subtree at `loc`."}, map->Fresh {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 50, :column 12, :end-line 50, :end-column 17, :internal-ctor true, :factory :map, :arglists (quote ([G__19112]))}, :name jamesmacaulay.zelkova.impl.signal/map->Fresh, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 17, :method-params ([G__19112]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__19112]))}, ->SignalDefinitionMetadata {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 160, :column 12, :end-line 160, :end-column 36, :internal-ctor true, :factory :positional, :arglists (quote ([parents-map kids-map topsort kid-indexes-map inputs-by-topic]))}, :name jamesmacaulay.zelkova.impl.signal/->SignalDefinitionMetadata, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 36, :method-params ([parents-map kids-map topsort kid-indexes-map inputs-by-topic]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 160, :end-line 160, :max-fixed-arity 5, :fn-var true, :arglists (quote ([parents-map kids-map topsort kid-indexes-map inputs-by-topic]))}, build-kid-indexes-map {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 153, :column 7, :end-line 153, :end-column 28, :arglists (quote ([kids-map sorted-sigs]))}, :name jamesmacaulay.zelkova.impl.signal/build-kid-indexes-map, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 28, :method-params ([kids-map sorted-sigs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 153, :end-line 153, :max-fixed-arity 2, :fn-var true, :arglists (quote ([kids-map sorted-sigs]))}, spawn* {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 345, :column 4, :end-line 345, :end-column 10, :protocol jamesmacaulay.zelkova.impl.signal/SignalLike, :doc nil, :arglists (quote ([x opts]))}, :protocol jamesmacaulay.zelkova.impl.signal/SignalLike, :name jamesmacaulay.zelkova.impl.signal/spawn*, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 10, :method-params ([x opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 344, :end-line 345, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x opts])), :doc nil}, fresh-values {:name jamesmacaulay.zelkova.impl.signal/fresh-values, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 73, :column 1, :end-line 74, :end-column 15, :doc "A transducer which takes in batches of signal graph messages and pipes out fresh values.", :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 74, :column 3, :end-line 74, :end-column 15, :doc "A transducer which takes in batches of signal graph messages and pipes out fresh values."}}, gather-event-sources {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 314, :column 7, :end-line 314, :end-column 27, :arglists (quote ([sorted-signals]))}, :name jamesmacaulay.zelkova.impl.signal/gather-event-sources, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 27, :method-params ([sorted-signals]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 314, :end-line 314, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sorted-signals]))}, make-event {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 45, :column 7, :end-line 45, :end-column 17, :arglists (quote ([topic value]))}, :name jamesmacaulay.zelkova.impl.signal/make-event, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 17, :method-params ([topic value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 2, :fn-var true, :arglists (quote ([topic value]))}, LiveChannelGraph {:num-fields 5, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core/ICounted cljs.core.async/Mult cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative jamesmacaulay.zelkova.impl.signal/LiveChannelGraphProtocol cljs.core/IMap cljs.core/ILookup}, :name jamesmacaulay.zelkova.impl.signal/LiveChannelGraph, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 28, :type true, :column 12, :internal-ctor true, :line 323, :record true, :end-line 323, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, fresh {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 65, :column 7, :end-line 65, :end-column 12, :arglists (quote ([value]))}, :name jamesmacaulay.zelkova.impl.signal/fresh, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 12, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value]))}, connect-to-world {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 320, :column 4, :end-line 320, :end-column 20, :protocol jamesmacaulay.zelkova.impl.signal/LiveChannelGraphProtocol, :doc nil, :arglists (quote ([g]))}, :protocol jamesmacaulay.zelkova.impl.signal/LiveChannelGraphProtocol, :name jamesmacaulay.zelkova.impl.signal/connect-to-world, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 20, :method-params ([g]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 318, :end-line 320, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g])), :doc nil}, value-source->events-fn {:name jamesmacaulay.zelkova.impl.signal/value-source->events-fn, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 385, :column 1, :end-line 385, :end-column 34, :doc "Takes some asynchronous `source` of values, plus an event `topic`, and returns\nan event-source function. `source` may be one of the following:\n\n* a function taking a live graph and an options map, and returns a channel of values\n* a channel of values\n* a mult of some such value channel\n\nThe returned event-source function has the same signature as the functions that can\nbe supplied for the `source` argument, but the values are wrapped as Events.", :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 385, :column 11, :end-line 385, :end-column 34, :doc "Takes some asynchronous `source` of values, plus an event `topic`, and returns\nan event-source function. `source` may be one of the following:\n\n* a function taking a live graph and an options map, and returns a channel of values\n* a channel of values\n* a mult of some such value channel\n\nThe returned event-source function has the same signature as the functions that can\nbe supplied for the `source` argument, but the values are wrapped as Events."}}, map->SignalDefinition {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 183, :column 12, :end-line 183, :end-column 28, :internal-ctor true, :factory :map, :arglists (quote ([G__19152]))}, :name jamesmacaulay.zelkova.impl.signal/map->SignalDefinition, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 28, :method-params ([G__19152]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 183, :end-line 183, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__19152]))}, ->Event {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 36, :column 12, :end-line 36, :end-column 17, :internal-ctor true, :factory :positional, :arglists (quote ([topic value timestamp]))}, :name jamesmacaulay.zelkova.impl.signal/->Event, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 17, :method-params ([topic value timestamp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 36, :end-line 36, :max-fixed-arity 3, :fn-var true, :arglists (quote ([topic value timestamp]))}, make-signal {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 214, :column 7, :end-line 214, :end-column 18, :arglists (quote ([opts])), :doc "Takes a map of opts and returns a signal."}, :name jamesmacaulay.zelkova.impl.signal/make-signal, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 18, :method-params ([opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 214, :end-line 214, :max-fixed-arity 1, :fn-var true, :arglists (quote ([opts])), :doc "Takes a map of opts and returns a signal."}, cached {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 69, :column 7, :end-line 69, :end-column 13, :arglists (quote ([value]))}, :name jamesmacaulay.zelkova.impl.signal/cached, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 13, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value]))}, map->Event {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 36, :column 12, :end-line 36, :end-column 17, :internal-ctor true, :factory :map, :arglists (quote ([G__19104]))}, :name jamesmacaulay.zelkova.impl.signal/map->Event, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 17, :method-params ([G__19104]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__19104]))}, record-timestamp {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 29, :column 4, :end-line 29, :end-column 20, :protocol jamesmacaulay.zelkova.impl.signal/EventProtocol, :doc nil, :arglists (quote ([event timestamp]))}, :protocol jamesmacaulay.zelkova.impl.signal/EventProtocol, :name jamesmacaulay.zelkova.impl.signal/record-timestamp, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 20, :method-params ([event timestamp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 29, :max-fixed-arity 2, :fn-var true, :arglists (quote ([event timestamp])), :doc nil}, node-graph-zipper {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 95, :column 8, :end-line 95, :end-column 25, :private true, :arglists (quote ([output-node])), :doc "Takes a signal and returns a zipper which can be used to traverse the signal graph."}, :private true, :name jamesmacaulay.zelkova.impl.signal/node-graph-zipper, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 25, :method-params ([output-node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 1, :fn-var true, :arglists (quote ([output-node])), :doc "Takes a signal and returns a zipper which can be used to traverse the signal graph."}, ->Fresh {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 50, :column 12, :end-line 50, :end-column 17, :internal-ctor true, :factory :positional, :arglists (quote ([value]))}, :name jamesmacaulay.zelkova.impl.signal/->Fresh, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 17, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value]))}, signal-mult {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 319, :column 4, :end-line 319, :end-column 15, :protocol jamesmacaulay.zelkova.impl.signal/LiveChannelGraphProtocol, :doc nil, :arglists (quote ([g sig]))}, :protocol jamesmacaulay.zelkova.impl.signal/LiveChannelGraphProtocol, :name jamesmacaulay.zelkova.impl.signal/signal-mult, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 15, :method-params ([g sig]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 318, :end-line 319, :max-fixed-arity 2, :fn-var true, :arglists (quote ([g sig])), :doc nil}, kids-map {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 85, :column 4, :end-line 85, :end-column 12, :protocol jamesmacaulay.zelkova.impl.signal/SignalProtocol, :doc nil, :arglists (quote ([s]))}, :protocol jamesmacaulay.zelkova.impl.signal/SignalProtocol, :name jamesmacaulay.zelkova.impl.signal/kids-map, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 12, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 85, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc nil}, spawn-message-loop! {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 288, :column 8, :end-line 288, :end-column 27, :private true, :arglists (quote ([init msg-xform c-in c-out]))}, :private true, :name jamesmacaulay.zelkova.impl.signal/spawn-message-loop!, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 27, :method-params ([init msg-xform c-in c-out]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 288, :end-line 288, :max-fixed-arity 4, :fn-var true, :arglists (quote ([init msg-xform c-in c-out]))}, signal? {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 90, :column 7, :end-line 90, :end-column 14, :arglists (quote ([x])), :doc "returns `true` if the argument satisfies `SignalProtocol`, `false` otherwise"}, :name jamesmacaulay.zelkova.impl.signal/signal?, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "returns `true` if the argument satisfies `SignalProtocol`, `false` otherwise"}, init {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 321, :column 4, :end-line 321, :end-column 8, :protocol jamesmacaulay.zelkova.impl.signal/LiveChannelGraphProtocol, :doc nil, :arglists (quote ([g]))}, :protocol jamesmacaulay.zelkova.impl.signal/LiveChannelGraphProtocol, :name jamesmacaulay.zelkova.impl.signal/init, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 8, :method-params ([g]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 318, :end-line 321, :max-fixed-arity 1, :fn-var true, :arglists (quote ([g])), :doc nil}, LiveChannelGraphProtocol {:meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 318, :column 14, :end-line 318, :end-column 38, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {signal-mult [[g sig]], connect-to-world [[g]], init [[g]]}}}, :protocol-symbol true, :name jamesmacaulay.zelkova.impl.signal/LiveChannelGraphProtocol, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 38, :column 1, :line 318, :protocol-info {:methods {signal-mult [[g sig]], connect-to-world [[g]], init [[g]]}}, :info nil, :end-line 318, :impls #{jamesmacaulay.zelkova.impl.signal/LiveChannelGraph}, :doc nil, :jsdoc ("@interface")}, ->SignalDefinition {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 183, :column 12, :end-line 183, :end-column 28, :internal-ctor true, :factory :positional, :arglists (quote ([init-fn sources relayed-event-topic msg-xform deps event-sources write-port-channel]))}, :name jamesmacaulay.zelkova.impl.signal/->SignalDefinition, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 28, :method-params ([init-fn sources relayed-event-topic msg-xform deps event-sources write-port-channel]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 183, :end-line 183, :max-fixed-arity 7, :fn-var true, :arglists (quote ([init-fn sources relayed-event-topic msg-xform deps event-sources write-port-channel]))}, Fresh {:num-fields 1, :protocols #{jamesmacaulay.zelkova.impl.signal/MessageProtocol cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative jamesmacaulay.zelkova.impl.signal/BoxedValueProtocol cljs.core/IMap cljs.core/ILookup}, :name jamesmacaulay.zelkova.impl.signal/Fresh, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 17, :type true, :column 12, :internal-ctor true, :line 50, :record true, :end-line 50, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->LiveChannelGraph {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 323, :column 12, :end-line 323, :end-column 28, :internal-ctor true, :factory :positional, :arglists (quote ([definition events-channel mult-map output-values-mult opts]))}, :name jamesmacaulay.zelkova.impl.signal/->LiveChannelGraph, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 28, :method-params ([definition events-channel mult-map output-values-mult opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 323, :end-line 323, :max-fixed-arity 5, :fn-var true, :arglists (quote ([definition events-channel mult-map output-values-mult opts]))}, SignalProtocol {:meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 81, :column 14, :end-line 81, :end-column 28, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {input? [[s]], signal-deps [[s]], parents-map [[s]], kids-map [[s]], topsort [[s]], inputs-by-topic [[s]], kid-indexes-map [[s]]}}}, :protocol-symbol true, :name jamesmacaulay.zelkova.impl.signal/SignalProtocol, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 28, :column 1, :line 81, :protocol-info {:methods {input? [[s]], signal-deps [[s]], parents-map [[s]], kids-map [[s]], topsort [[s]], inputs-by-topic [[s]], kid-indexes-map [[s]]}}, :info nil, :end-line 81, :impls #{jamesmacaulay.zelkova.impl.signal/SignalDefinition}, :doc nil, :jsdoc ("@interface")}, map->SignalDefinitionMetadata {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 160, :column 12, :end-line 160, :end-column 36, :internal-ctor true, :factory :map, :arglists (quote ([G__19138]))}, :name jamesmacaulay.zelkova.impl.signal/map->SignalDefinitionMetadata, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 36, :method-params ([G__19138]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 160, :end-line 160, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__19138]))}, transpose {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 245, :column 8, :end-line 245, :end-column 17, :private true, :arglists (quote ([msg-batches])), :doc "Takes a collection of message batches and returns a sequence of vectors of corresponding\n  messages from each batch."}, :private true, :name jamesmacaulay.zelkova.impl.signal/transpose, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 17, :method-params ([msg-batches]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 245, :end-line 245, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msg-batches])), :doc "Takes a collection of message batches and returns a sequence of vectors of corresponding\n  messages from each batch."}, BoxedValueProtocol {:meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 22, :column 14, :end-line 22, :end-column 32, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {value [[boxed]]}}}, :protocol-symbol true, :name jamesmacaulay.zelkova.impl.signal/BoxedValueProtocol, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 32, :column 1, :line 22, :protocol-info {:methods {value [[boxed]]}}, :info nil, :end-line 22, :impls #{jamesmacaulay.zelkova.impl.signal/Fresh jamesmacaulay.zelkova.impl.signal/Event jamesmacaulay.zelkova.impl.signal/Cached}, :doc nil, :jsdoc ("@interface")}, tap-signals {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 281, :column 8, :end-line 281, :end-column 19, :private true, :arglists (quote ([mult-map sources]))}, :private true, :name jamesmacaulay.zelkova.impl.signal/tap-signals, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 19, :method-params ([mult-map sources]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 281, :end-line 281, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mult-map sources]))}, parents-map->topsort {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 140, :column 7, :end-line 140, :end-column 27, :arglists (quote ([pm]))}, :name jamesmacaulay.zelkova.impl.signal/parents-map->topsort, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 27, :method-params ([pm]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 140, :end-line 140, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pm]))}, value {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 23, :column 4, :end-line 23, :end-column 9, :protocol jamesmacaulay.zelkova.impl.signal/BoxedValueProtocol, :doc nil, :arglists (quote ([boxed]))}, :protocol jamesmacaulay.zelkova.impl.signal/BoxedValueProtocol, :name jamesmacaulay.zelkova.impl.signal/value, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 9, :method-params ([boxed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([boxed])), :doc nil}, build-message-mult-map {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 306, :column 7, :end-line 306, :end-column 29, :arglists (quote ([sorted-signals events-mult live-graph opts]))}, :name jamesmacaulay.zelkova.impl.signal/build-message-mult-map, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 29, :method-params ([sorted-signals events-mult live-graph opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 306, :end-line 306, :max-fixed-arity 4, :fn-var true, :arglists (quote ([sorted-signals events-mult live-graph opts]))}, signal-deps {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 83, :column 4, :end-line 83, :end-column 15, :protocol jamesmacaulay.zelkova.impl.signal/SignalProtocol, :doc "returns the set of \"parent\" signals on which this signal depends", :arglists (quote ([s]))}, :protocol jamesmacaulay.zelkova.impl.signal/SignalProtocol, :name jamesmacaulay.zelkova.impl.signal/signal-deps, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 15, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 83, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "returns the set of \"parent\" signals on which this signal depends"}, ->Cached {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 58, :column 12, :end-line 58, :end-column 18, :internal-ctor true, :factory :positional, :arglists (quote ([value]))}, :name jamesmacaulay.zelkova.impl.signal/->Cached, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 18, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value]))}, MessageProtocol {:meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 31, :column 14, :end-line 31, :end-column 29, :doc "Messages are propagated through the signal graph, and can either be \"fresh\" or \"cached\".", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {fresh? [[msg]]}}}, :protocol-symbol true, :name jamesmacaulay.zelkova.impl.signal/MessageProtocol, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 29, :column 1, :line 31, :protocol-info {:methods {fresh? [[msg]]}}, :info nil, :end-line 31, :impls #{jamesmacaulay.zelkova.impl.signal/Fresh jamesmacaulay.zelkova.impl.signal/Cached}, :doc "Messages are propagated through the signal graph, and can either be \"fresh\" or \"cached\".", :jsdoc ("@interface")}, kid-indexes-map {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 88, :column 4, :end-line 88, :end-column 19, :protocol jamesmacaulay.zelkova.impl.signal/SignalProtocol, :doc nil, :arglists (quote ([s]))}, :protocol jamesmacaulay.zelkova.impl.signal/SignalProtocol, :name jamesmacaulay.zelkova.impl.signal/kid-indexes-map, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 19, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 88, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc nil}, SignalLike {:meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 344, :column 14, :end-line 344, :end-column 24, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {spawn* [[x opts]], pipe-to-atom* [[x a ks]]}}}, :protocol-symbol true, :name jamesmacaulay.zelkova.impl.signal/SignalLike, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 24, :column 1, :line 344, :protocol-info {:methods {spawn* [[x opts]], pipe-to-atom* [[x a ks]]}}, :info nil, :end-line 344, :impls #{jamesmacaulay.zelkova.impl.signal/SignalDefinition jamesmacaulay.zelkova.impl.signal/LiveChannelGraph}, :doc nil, :jsdoc ("@interface")}, build-message-mult {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 299, :column 8, :end-line 299, :end-column 26, :private true, :arglists (quote ([mult-map {:keys [init-fn sources msg-xform]} live-graph opts]))}, :private true, :name jamesmacaulay.zelkova.impl.signal/build-message-mult, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 26, :method-params ([mult-map p__19250 live-graph opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 299, :end-line 299, :max-fixed-arity 4, :fn-var true, :arglists (quote ([mult-map {:keys [init-fn sources msg-xform]} live-graph opts]))}, Event {:num-fields 3, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable jamesmacaulay.zelkova.impl.signal/EventProtocol cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative jamesmacaulay.zelkova.impl.signal/BoxedValueProtocol cljs.core/IMap cljs.core/ILookup}, :name jamesmacaulay.zelkova.impl.signal/Event, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 17, :type true, :column 12, :internal-ctor true, :line 36, :record true, :end-line 36, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, SignalDefinition {:num-fields 7, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta jamesmacaulay.zelkova.impl.signal/SignalProtocol cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name jamesmacaulay.zelkova.impl.signal/SignalDefinition, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 28, :type true, :column 12, :internal-ctor true, :line 183, :record true, :end-line 183, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, topic {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 27, :column 4, :end-line 27, :end-column 9, :protocol jamesmacaulay.zelkova.impl.signal/EventProtocol, :doc nil, :arglists (quote ([event]))}, :protocol jamesmacaulay.zelkova.impl.signal/EventProtocol, :name jamesmacaulay.zelkova.impl.signal/topic, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 9, :method-params ([event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([event])), :doc nil}, setup-event-relay {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 202, :column 8, :end-line 202, :end-column 25, :private true, :arglists (quote ([opts])), :doc "Takes a topic, and returns an input signal which relays matching events as messages to its children"}, :private true, :name jamesmacaulay.zelkova.impl.signal/setup-event-relay, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 25, :method-params ([opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 202, :end-line 202, :max-fixed-arity 1, :fn-var true, :arglists (quote ([opts])), :doc "Takes a topic, and returns an input signal which relays matching events as messages to its children"}, map->Cached {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 58, :column 12, :end-line 58, :end-column 18, :internal-ctor true, :factory :map, :arglists (quote ([G__19120]))}, :name jamesmacaulay.zelkova.impl.signal/map->Cached, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 18, :method-params ([G__19120]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__19120]))}, ensure-sequential {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 224, :column 8, :end-line 224, :end-column 25, :private true, :arglists (quote ([x])), :doc "Wraps `x` in a vector, if necessary, returning an empty vector if `x` is `nil`."}, :private true, :name jamesmacaulay.zelkova.impl.signal/ensure-sequential, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 25, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 224, :end-line 224, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Wraps `x` in a vector, if necessary, returning an empty vector if `x` is `nil`."}, SignalDefinitionMetadata {:num-fields 5, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name jamesmacaulay.zelkova.impl.signal/SignalDefinitionMetadata, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 36, :type true, :column 12, :internal-ctor true, :line 160, :record true, :end-line 160, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, pipe-to-atom* {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 346, :column 4, :end-line 346, :end-column 17, :protocol jamesmacaulay.zelkova.impl.signal/SignalLike, :doc nil, :arglists (quote ([x a ks]))}, :protocol jamesmacaulay.zelkova.impl.signal/SignalLike, :name jamesmacaulay.zelkova.impl.signal/pipe-to-atom*, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 17, :method-params ([x a ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 344, :end-line 346, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x a ks])), :doc nil}, tap-signal {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 276, :column 8, :end-line 276, :end-column 18, :private true, :arglists (quote ([mult-map source]))}, :private true, :name jamesmacaulay.zelkova.impl.signal/tap-signal, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 18, :method-params ([mult-map source]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 276, :end-line 276, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mult-map source]))}, attach-delayed-metadata {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 163, :column 8, :end-line 163, :end-column 31, :private true, :arglists (quote ([sig]))}, :private true, :name jamesmacaulay.zelkova.impl.signal/attach-delayed-metadata, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 31, :method-params ([sig]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 163, :end-line 163, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sig]))}, pad {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 232, :column 8, :end-line 232, :end-column 11, :private true, :arglists (quote ([msg-batches])), :doc "Takes a collection of message batches, presumably from some corresponding collection\n  of signals. Pads each batch, when necessary, with cached versions of the last message\n  in the batch, such that the returned batches are all the same size."}, :private true, :name jamesmacaulay.zelkova.impl.signal/pad, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 11, :method-params ([msg-batches]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 232, :end-line 232, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msg-batches])), :doc "Takes a collection of message batches, presumably from some corresponding collection\n  of signals. Pads each batch, when necessary, with cached versions of the last message\n  in the batch, such that the returned batches are all the same size."}, events-xform {:name jamesmacaulay.zelkova.impl.signal/events-xform, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 348, :column 1, :end-line 348, :end-column 28, :private true, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 348, :column 16, :end-line 348, :end-column 28, :private true}}, build-output-values-mult {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 356, :column 8, :end-line 356, :end-column 32, :private true, :arglists (quote ([mult-map output-sig]))}, :private true, :name jamesmacaulay.zelkova.impl.signal/build-output-values-mult, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 32, :method-params ([mult-map output-sig]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 356, :end-line 356, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mult-map output-sig]))}, Cached {:num-fields 1, :protocols #{jamesmacaulay.zelkova.impl.signal/MessageProtocol cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative jamesmacaulay.zelkova.impl.signal/BoxedValueProtocol cljs.core/IMap cljs.core/ILookup}, :name jamesmacaulay.zelkova.impl.signal/Cached, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 18, :type true, :column 12, :internal-ctor true, :line 58, :record true, :end-line 58, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, delegate-to-channel {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 177, :column 8, :end-line 177, :end-column 27, :private true, :arglists (quote ([f ch & args])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(f ch args)], :arglists ([f ch & args]), :arglists-meta (nil)}}, :private true, :name jamesmacaulay.zelkova.impl.signal/delegate-to-channel, :variadic true, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(f ch args)], :arglists ([f ch & args]), :arglists-meta (nil)}, :method-params [(f ch args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 177, :end-line 177, :max-fixed-arity 2, :fn-var true, :arglists ([f ch & args])}, topsort {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 86, :column 4, :end-line 86, :end-column 11, :protocol jamesmacaulay.zelkova.impl.signal/SignalProtocol, :doc nil, :arglists (quote ([s]))}, :protocol jamesmacaulay.zelkova.impl.signal/SignalProtocol, :name jamesmacaulay.zelkova.impl.signal/topsort, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 11, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 86, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc nil}, inputs-by-topic {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 87, :column 4, :end-line 87, :end-column 19, :protocol jamesmacaulay.zelkova.impl.signal/SignalProtocol, :doc nil, :arglists (quote ([s]))}, :protocol jamesmacaulay.zelkova.impl.signal/SignalProtocol, :name jamesmacaulay.zelkova.impl.signal/inputs-by-topic, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 19, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc nil}, wrap-msg-xform {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 251, :column 8, :end-line 251, :end-column 22, :private true, :arglists (quote ([msg-xform])), :doc "Takes a signal's `msg-fn` and wraps it to provide various behaviours:\n    * return values are turned into sequences with `ensure-sequential`\n    * message batches from each signal are padded and transposed, and `msg-fn` is called\n      once for each vector of messages in the resulting series, as if each were the result\n      of a separate event.\n    * when `msg-fn` returns `nil` or an empty sequence, the previous value is returned as a\n      cached value."}, :private true, :name jamesmacaulay.zelkova.impl.signal/wrap-msg-xform, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 22, :method-params ([msg-xform]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 251, :end-line 251, :max-fixed-arity 1, :fn-var true, :arglists (quote ([msg-xform])), :doc "Takes a signal's `msg-fn` and wraps it to provide various behaviours:\n    * return values are turned into sequences with `ensure-sequential`\n    * message batches from each signal are padded and transposed, and `msg-fn` is called\n      once for each vector of messages in the resulting series, as if each were the result\n      of a separate event.\n    * when `msg-fn` returns `nil` or an empty sequence, the previous value is returned as a\n      cached value."}, calculate-dependency-maps {:protocol-inline nil, :meta {:file "/Users/ivp/dev/projects/matter_cljs/climbr/resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :line 113, :column 7, :end-line 113, :end-column 32, :arglists (quote ([signal])), :doc "Takes a signal and returns a map of two maps:\n    :parents-map is a map of signals to their parents,\n    :kids-map is a map of signals to their children."}, :name jamesmacaulay.zelkova.impl.signal/calculate-dependency-maps, :variadic false, :file "resources/public/js/compiled/out/jamesmacaulay/zelkova/impl/signal.cljs", :end-column 32, :method-params ([signal]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 1, :fn-var true, :arglists (quote ([signal])), :doc "Takes a signal and returns a map of two maps:\n    :parents-map is a map of signals to their parents,\n    :kids-map is a map of signals to their children."}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:event-sources :events-channel parents-map timestamp msg-xform :definition :ifn :kids-map :else deps :default event-sources events-channel :sources :events definition :value :kid-indexes-map :mult-map kids-map :recur :topic sources value :output-values-mult kid-indexes-map mult-map :write-port-channel nil? not :init-fn topic :opts :relayed-event-topic :readport :mult ch output-values-mult :topsort :inputs-by-topic write-port-channel init-fn :end :parents-map :hierarchy :timestamp :msg-xform :signal opts relayed-event-topic topsort :deps inputs-by-topic}, :order [:timestamp :topic :value topic value timestamp :end :parents-map :kids-map :else :relayed-event-topic :topsort :kid-indexes-map :inputs-by-topic parents-map kids-map topsort kid-indexes-map inputs-by-topic not nil? ch :init-fn :sources :msg-xform :deps :event-sources :write-port-channel :events init-fn sources relayed-event-topic msg-xform deps event-sources write-port-channel :recur :definition :events-channel :mult-map :output-values-mult :opts definition events-channel mult-map output-values-mult opts :signal :hierarchy :mult :readport :ifn :default]}, :doc "Implementation details for `jamesmacaulay.zelkova.signal`."}